<?xml version="1.0" ?>

<!--
 Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-->

<!-- This is a "kitchen sink" config file that tests can use.
     When writting a new test, feel free to add *new* items (plugins,
     config options, etc...) as long as they don't break any existing
     tests.  if you need to test something esoteric please add a new
     "solrconfig-your-esoteric-purpose.xml" config file.

     Note in particular that this test is used by MinimalSchemaTest so
     Anything added to this file needs to work correctly even if there
     is now uniqueKey or defaultSearch Field.
  -->

<config>

    <jmx/>

    <!-- Used to specify an alternate directory to hold all index data.
         It defaults to "index" if not present, and should probably
         not be changed if replication is in use. -->
    <dataDir>${solr.data.dir:}</dataDir>

    <!--  The DirectoryFactory to use for indexes.
          solr.StandardDirectoryFactory, the default, is filesystem based.
          solr.RAMDirectoryFactory is memory based and not persistent. -->
    <directoryFactory name="DirectoryFactory" class="${solr.directoryFactory:solr.NRTCachingDirectoryFactory}">
        <!--<double name="maxWriteMBPerSecDefault">1000000</double>-->
        <!--<double name="maxWriteMBPerSecFlush">2000000</double>-->
        <!--<double name="maxWriteMBPerSecMerge">3000000</double>-->
        <!--<double name="maxWriteMBPerSecRead">4000000</double>-->
    </directoryFactory>

    <codecFactory class="solr.SchemaCodecFactory"/>

    <luceneMatchVersion>${tests.luceneMatchVersion:LUCENE_CURRENT}</luceneMatchVersion>

    <indexConfig>
        <!--<mergeScheduler class="org.apache.lucene.index.ConcurrentMergeScheduler"/>-->
        <!--<writeLockTimeout>1000</writeLockTimeout>-->
        <!--<mergeFactor>8</mergeFactor>-->

        <!--&lt;!&ndash; for better multi-segment testing, we are using slower-->
        <!--indexing properties of maxBufferedDocs=10 and LogDocMergePolicy.-->
        <!--&ndash;&gt;-->
        <!--<maxBufferedDocs>10</maxBufferedDocs>-->
        <!--<mergePolicy class="org.apache.lucene.index.LogDocMergePolicy"/>-->
        <lockType>${solr.lock.type:native}</lockType>
        <infoStream>true</infoStream>
    </indexConfig>

    <updateHandler class="solr.DirectUpdateHandler2">

        <!-- autocommit pending docs if certain criteria are met
        <autoCommit>
          <maxDocs>10000</maxDocs>
          <maxTime>3600000</maxTime>
        </autoCommit>
        -->
        <!-- represents a lower bound on the frequency that commits may
        occur (in seconds). NOTE: not yet implemented

        <commitIntervalLowerBound>0</commitIntervalLowerBound>
        -->

        <!-- The RunExecutableListener executes an external command.
             exe - the name of the executable to run
             dir - dir to use as the current working directory. default="."
             wait - the calling thread waits until the executable returns. default="true"
             args - the arguments to pass to the program.  default=nothing
             env - environment variables to set.  default=nothing
          -->
        <!-- A postCommit event is fired after every commit
        <listener event="postCommit" class="solr.RunExecutableListener">
          <str name="exe">/var/opt/resin3/__PORT__/scripts/solr/snapshooter</str>
          <str name="dir">/var/opt/resin3/__PORT__</str>
          <bool name="wait">true</bool>
          <arr name="args"> <str>arg1</str> <str>arg2</str> </arr>
          <arr name="env"> <str>MYVAR=val1</str> </arr>
        </listener>
        -->

        <updateLog>
            <str name="dir">${solr.ulog.dir:}</str>
            <int name="numVersionBuckets">${solr.ulog.numVersionBuckets:65536}</int>
        </updateLog>

        <autoCommit>
            <maxTime>${solr.autoCommit.maxTime:15000}</maxTime>
            <openSearcher>false</openSearcher>
        </autoCommit>

        <autoSoftCommit>
            <maxTime>${solr.autoSoftCommit.maxTime:-1}</maxTime>
        </autoSoftCommit>

    </updateHandler>


    <query>
        <!-- Maximum number of clauses in a boolean query... can affect
            range or wildcard queries that expand to big boolean
            queries.  An exception is thrown if exceeded.
        -->
        <maxBooleanClauses>1024</maxBooleanClauses>


        <!-- Cache specification for Filters or DocSets - unordered set of *all* documents
             that match a particular query.
          -->
        <filterCache
                class="solr.search.FastLRUCache"
                size="512"
                initialSize="512"
                autowarmCount="0"/>

        <queryResultCache
                class="solr.search.LRUCache"
                size="512"
                initialSize="512"
                autowarmCount="0"/>

        <documentCache
                class="solr.search.LRUCache"
                size="512"
                initialSize="512"
                autowarmCount="0"/>

        <cache name="perSegFilter"
               class="solr.search.LRUCache"
               size="10"
               initialSize="0"
               autowarmCount="10"
               regenerator="solr.NoOpRegenerator"/>

        <!-- If true, stored fields that are not requested will be loaded lazily.
        -->
        <enableLazyFieldLoading>true</enableLazyFieldLoading>

        <!--

        <cache name="myUserCache"
          class="solr.search.LRUCache"
          size="4096"
          initialSize="1024"
          autowarmCount="1024"
          regenerator="MyRegenerator"
          />
        -->


        <!--
        <useFilterForSortedQuery>true</useFilterForSortedQuery>
        -->

        <queryResultWindowSize>10</queryResultWindowSize>

        <queryResultMaxDocsCached>200</queryResultMaxDocsCached>

        <useColdSearcher>false</useColdSearcher>

        <maxWarmingSearchers>2</maxWarmingSearchers>

        <!-- set maxSize artificially low to exercise both types of sets -->
        <!--<HashDocSet maxSize="3" loadFactor="0.75"/>-->


        <!-- boolToFilterOptimizer converts boolean clauses with zero boost
             into cached filters if the number of docs selected by the clause exceeds
             the threshold (represented as a fraction of the total index)
        -->
        <!--<boolTofilterOptimizer enabled="false" cacheSize="32" threshold=".05"/>-->


        <!-- a newSearcher event is fired whenever a new searcher is being prepared
             and there is a current searcher handling requests (aka registered). -->
        <!-- QuerySenderListener takes an array of NamedList and executes a
             local query request for each NamedList in sequence. -->
        <!--
        <listener event="newSearcher" class="solr.QuerySenderListener">
          <arr name="queries">
            <lst> <str name="q">solr</str> <str name="start">0</str> <str name="rows">10</str> </lst>
            <lst> <str name="q">rocks</str> <str name="start">0</str> <str name="rows">10</str> </lst>
          </arr>
        </listener>
        -->

        <!-- a firstSearcher event is fired whenever a new searcher is being
             prepared but there is no current registered searcher to handle
             requests or to gain prewarming data from. -->
        <!--
        <listener event="firstSearcher" class="solr.QuerySenderListener">
          <arr name="queries">
            <lst> <str name="q">fast_warm</str> <str name="start">0</str> <str name="rows">10</str> </lst>
          </arr>
        </listener>
        -->


    </query>

    <requestDispatcher handleSelect="false">
        <requestParsers enableRemoteStreaming="true"
                        multipartUploadLimitInKB="2048000"
                        formdataUploadLimitInKB="2048"
                        addHttpRequestToContext="false"/>
        <httpCaching never304="true"/>
    </requestDispatcher>

    <requestHandler name="/select" class="solr.SearchHandler">
        <!-- default values for query parameters can be specified, these
          will be overridden by parameters in the request
       -->
        <lst name="defaults">
            <str name="echoParams">explicit</str>
            <int name="rows">10</int>
        </lst>

    </requestHandler>

    <!-- A request handler that returns indented JSON by default -->
    <requestHandler name="/query" class="solr.SearchHandler">
        <lst name="defaults">
            <str name="echoParams">explicit</str>
            <str name="wt">json</str>
            <str name="indent">true</str>
            <str name="df">text</str>
        </lst>
    </requestHandler>

    <initParams path="/update/**,/query,/select,/tvrh,/elevate,/spell">
        <lst name="defaults">
            <str name="df">text</str>
        </lst>
    </initParams>

    <!-- Field Analysis Request Handler

        RequestHandler that provides much the same functionality as
        analysis.jsp. Provides the ability to specify multiple field
        types and field names in the same request and outputs
        index-time and query-time analysis for each of them.

        Request parameters are:
        analysis.fieldname - field name whose analyzers are to be used

        analysis.fieldtype - field type whose analyzers are to be used
        analysis.fieldvalue - text for index-time analysis
        q (or analysis.q) - text for query time analysis
        analysis.showmatch (true|false) - When set to true and when
            query analysis is performed, the produced tokens of the
            field value analysis will be marked as "matched" for every
            token that is produces by the query analysis
    -->
    <requestHandler name="/analysis/field"
                    startup="lazy"
                    class="solr.FieldAnalysisRequestHandler"/>


    <!-- Document Analysis Handler

        http://wiki.apache.org/solr/AnalysisRequestHandler

        An analysis handler that provides a breakdown of the analysis
        process of provided documents. This handler expects a (single)
        content stream with the following format:

        <docs>
          <doc>
            <field name="id">1</field>
            <field name="name">The Name</field>
            <field name="text">The Text Value</field>
          </doc>
          <doc>...</doc>
          <doc>...</doc>
          ...
        </docs>

     Note: Each document must contain a field which serves as the
     unique key. This key is used in the returned response to associate
     an analysis breakdown to the analyzed document.

     Like the FieldAnalysisRequestHandler, this handler also supports
     query analysis by sending either an "analysis.query" or "q"
     request parameter that holds the query text to be analyzed. It
     also supports the "analysis.showmatch" parameter which when set to
     true, all field tokens that match the query tokens will be marked
     as a "match".
    -->
    <requestHandler name="/analysis/document"
                    class="solr.DocumentAnalysisRequestHandler"
                    startup="lazy"/>

    <!-- Echo the request contents back to the client -->
    <requestHandler name="/debug/dump" class="solr.DumpRequestHandler">
        <lst name="defaults">
            <str name="echoParams">explicit</str>
            <str name="echoHandler">true</str>
        </lst>
    </requestHandler>

    <searchComponent name="query" class="solr.QueryComponent"/>
    <searchComponent name="facet" class="solr.FacetComponent"/>
    <searchComponent name="mlt" class="solr.MoreLikeThisComponent"/>
    <searchComponent name="highlight" class="solr.HighlightComponent"/>
    <searchComponent name="stats" class="solr.StatsComponent"/>
    <searchComponent name="debug" class="solr.DebugComponent"/>
    <!-- Terms Component

           http://wiki.apache.org/solr/TermsComponent

           A component to return terms and document frequency of those
           terms
        -->
    <searchComponent name="terms" class="solr.TermsComponent"/>

    <!-- A request handler for demonstrating the terms component -->
    <requestHandler name="/terms" class="solr.SearchHandler" startup="lazy">
        <lst name="defaults">
            <bool name="terms">true</bool>
            <bool name="distrib">false</bool>
        </lst>
        <arr name="components">
            <str>terms</str>
        </arr>
    </requestHandler>

</config>
